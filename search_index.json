[["index.html", "Visualizing single cell data Preface", " Visualizing single cell data Guangchuang Yu and Shuangbin Xu Department of Bioinformatics, School of Basic Medical Sciences, Southern Medical University guangchuangyu@gmail.com 2023-11-30 Preface Single-cell RNA sequencing (scRNA-seq) and Spatial RNA sequencing are widely used techniques for profiling gene expression in individual cells with their locations in the histological sections. These allow molecular biology to be studied at a resolution that cannot be matched by bulk sequencing of cell populations. To better visualize the result of reduction, spatial gene expression pattern in single cell or spatial experiment data, ggsc provides some layer functions based on the ggplot2 grammar. It can work with the SingleCellExperiment class or Seurat class, which are the widely used classes for storing data from single cell experiment. "],["visualizing-seurat-objects.html", "1 Visualizing Seurat objects 1.1 Dimensional reduction plot 1.2 Visualize ‘features’ on a dimensional reduction plot 1.3 Visualize ellipse on a dimensional reduction plot 1.4 Visualize selected clusters 1.5 Dot plot for selected features 1.6 Violin plot of gene expression 1.7 Spatial features", " 1 Visualizing Seurat objects library(Seurat) dir = &quot;data/filtered_gene_bc_matrices/hg19&quot; pbmc.data &lt;- Read10X(data.dir = dir) pbmc &lt;- CreateSeuratObject(counts = pbmc.data, project = &quot;pbmc3k&quot;, min.cells=3, min.features=200) pbmc ## An object of class Seurat ## 13714 features across 2700 samples within 1 assay ## Active assay: RNA (13714 features, 0 variable features) ## 1 layer present: counts pbmc[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(pbmc, pattern = &quot;^MT-&quot;) pbmc &lt;- subset(pbmc, subset = nFeature_RNA &gt; 200 &amp; nFeature_RNA &lt; 2500 &amp; percent.mt &lt; 5 ) pbmc &lt;- NormalizeData(pbmc, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) pbmc &lt;- ScaleData(pbmc) pbmc &lt;- FindVariableFeatures(pbmc, selection.method = &quot;vst&quot;, nfeatures = 2000) pbmc &lt;- RunPCA(pbmc, features = VariableFeatures(object = pbmc)) pbmc &lt;- RunUMAP(pbmc, dims = 1:10) pbmc &lt;- FindNeighbors(pbmc, dims = 1:10) pbmc &lt;- FindClusters(pbmc, resolution = 0.5) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 2638 ## Number of edges: 95927 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8728 ## Number of communities: 9 ## Elapsed time: 0 seconds ## Assigning cell type identity to clusters cluster.ids &lt;- c(&quot;Naive CD4 T&quot;, &quot;CD14+ Mono&quot;, &quot;Memory CD4 T&quot;, &quot;B&quot;, &quot;CD8 T&quot;, &quot;FCGR3A+ Mono&quot;, &quot;NK&quot;, &quot;DC&quot;, &quot;Platelet&quot;) names(cluster.ids) &lt;- levels(pbmc) pbmc &lt;- RenameIdents(pbmc, cluster.ids) pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE) 1.1 Dimensional reduction plot # DimPlot(pbmc, reduction = &quot;umap&quot;, # label = TRUE, pt.size = 0.5) library(ggplot2) library(ggsc) sc_dim(pbmc) + sc_dim_geom_label() p &lt;- sc_dim(pbmc) + sc_dim_geom_label(geom = shadowtext::geom_shadowtext, color=&#39;black&#39;, bg.color=&#39;white&#39;) p The number of cells in each clusters can be easily Visualized using sc_dim_count(). The colors of the bar plot is consistent with the dimensional reduction plot. p2 &lt;- sc_dim_count(p) library(aplot) plot_list(p, p2, widths=c(1, .5)) library(dplyr) top20 &lt;- pbmc.markers |&gt; group_by(cluster) |&gt; filter(avg_log2FC &gt; 1) |&gt; slice_head(n = 20) |&gt; ungroup() library(clusterProfiler) library(enrichplot) gg &lt;- bitr(top20$gene, &#39;SYMBOL&#39;, &#39;ENTREZID&#39;, &#39;org.Hs.eg.db&#39;) top20 &lt;- merge(top20, gg, by.x=&#39;gene&#39;, by.y = &#39;SYMBOL&#39;) kk &lt;- compareCluster(ENTREZID~cluster, data = top20, fun=enrichKEGG) g &lt;- dotplot(kk, label_format=100) + aes(x=sub(&quot;\\n.*&quot;, &quot;&quot;, Cluster)) + xlab(&quot;Cell Clusters&quot;) + ggtitle(NULL) + theme(axis.text.x = element_text(angle=30, hjust=1)) p3 &lt;- p2 + coord_cartesian() + ggfun::theme_noxaxis() + xlab(NULL) insert_top(g, p3, height=.2) 1.2 Visualize ‘features’ on a dimensional reduction plot features = c(&quot;MS4A1&quot;, &quot;GNLY&quot;, &quot;CD3E&quot;, &quot;CD14&quot;, &quot;FCER1A&quot;, &quot;FCGR3A&quot;, &quot;LYZ&quot;, &quot;PPBP&quot;, &quot;CD8A&quot;) # FeaturePlot(pbmc,&#39;CD4&#39;) sc_feature(pbmc, &#39;CD4&#39;) sc_feature(pbmc, features) Here is the real ‘features’ on dimensional plot sc_dim(pbmc) + sc_dim_geom_feature(pbmc, &#39;CD4&#39;, color=&#39;black&#39;) sc_dim(pbmc, alpha=.3) + ggnewscale::new_scale_color() + sc_dim_geom_feature(pbmc, features, mapping=aes(color=features)) + scale_color_viridis_d() sc_dim(pbmc) + sc_dim_geom_feature(pbmc, &#39;CD4&#39;, color=&#39;black&#39;) sc_dim(pbmc, alpha=.3) + ggnewscale::new_scale_color() + sc_dim_geom_feature(pbmc, features, mapping=aes(color=features)) + scale_color_viridis_d() 1.3 Visualize ellipse on a dimensional reduction plot sc_dim(pbmc) + sc_dim_geom_ellipse(level=0.95) 1.4 Visualize selected clusters selected &lt;- c(&quot;Naive CD4 T&quot;, &quot;NK&quot;) sc_dim(pbmc) + sc_dim_sub(subset=selected) sc_dim(pbmc, color=&#39;grey&#39;) + sc_dim_geom_sub(subset=selected) + sc_dim_geom_label(geom = shadowtext::geom_shadowtext, mapping = aes(subset = ident %in% selected), color=&#39;black&#39;, bg.color=&#39;white&#39;) 1.5 Dot plot for selected features features = c(&quot;MS4A1&quot;, &quot;GNLY&quot;, &quot;CD3E&quot;, &quot;CD14&quot;, &quot;FCER1A&quot;, &quot;FCGR3A&quot;, &quot;LYZ&quot;, &quot;PPBP&quot;, &quot;CD8A&quot;) # DotPlot(pbmc, features = features, # group.by = &#39;seurat_clusters&#39;) sc_dot(pbmc, features=features) 1.6 Violin plot of gene expression # VlnPlot(pbmc,&#39;CD4&#39;) sc_violin(pbmc, &#39;CD4&#39;) ## allows applying an user-defined function to transform/filter the data sc_violin(pbmc, &#39;CD4&#39;, .fun=function(d) dplyr::filter(d, value &gt; 0)) + ggforce::geom_sina(size=.1) #VlnPlot(pbmc, features) sc_violin(pbmc, features) + theme(axis.text.x = element_text(angle=45, hjust=1)) 1.7 Spatial features library(SeuratData) # InstallData(&quot;stxBrain&quot;) brain &lt;- LoadData(&quot;stxBrain&quot;, type = &quot;anterior1&quot;) # Normalization brain &lt;- SCTransform(brain, assay = &quot;Spatial&quot;, verbose = FALSE) ## SpatialFeaturePlot(brain, features = c(&quot;Hpca&quot;, &quot;Ttr&quot;))\\ sc_spatial(brain, features = c(&quot;Hpca&quot;, &quot;Ttr&quot;), image.mirror.axis = &#39;v&#39;) "],["visualizing-singlecellexperiment-or-spatialexperiment-objects.html", "2 Visualizing SingleCellExperiment or SpatialExperiment objects 2.1 Dimensional reduction plot 2.2 Visualize ‘features’ on a dimensional reduction plot 2.3 Dot plot for selected features 2.4 Violin plot of gene expression 2.5 Spatial features", " 2 Visualizing SingleCellExperiment or SpatialExperiment objects library(BiocParallel) library(scater) library(scran) library(ggplot2) Here we use an example data from a single sample (sample 151673) of human brain dorsolateral prefrontal cortex (DLPFC) in the human brain, measured using the 10x Genomics Visium platform. First, a brief/standard data pre-processing were done with the scater and scran packages. # library(STexampleData) # ## create ExperimentHub instance # eh &lt;- ExperimentHub() ## query STexampleData datasets # myfiles &lt;- query(eh, &quot;STexampleData&quot;) # spe &lt;- myfiles[[&quot;EH7538&quot;]] spe &lt;- readRDS(&quot;data/Visium_humanDLPFC.rds&quot;) spe &lt;- addPerCellQC(spe, subsets=list(Mito=grep(&quot;^MT-&quot;, rowData(spe)$gene_name))) colData(spe) |&gt; head() ## DataFrame with 6 rows and 13 columns ## barcode_id sample_id ## &lt;character&gt; &lt;character&gt; ## AAACAACGAATAGTTC-1 AAACAACGAATAGTTC-1 sample_151673 ## AAACAAGTATCTCCCA-1 AAACAAGTATCTCCCA-1 sample_151673 ## AAACAATCTACTAGCA-1 AAACAATCTACTAGCA-1 sample_151673 ## AAACACCAATAACTGC-1 AAACACCAATAACTGC-1 sample_151673 ## AAACAGAGCGACTCCT-1 AAACAGAGCGACTCCT-1 sample_151673 ## AAACAGCTTTCAGAAG-1 AAACAGCTTTCAGAAG-1 sample_151673 ## in_tissue array_row array_col ## &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; ## AAACAACGAATAGTTC-1 0 0 16 ## AAACAAGTATCTCCCA-1 1 50 102 ## AAACAATCTACTAGCA-1 1 3 43 ## AAACACCAATAACTGC-1 1 59 19 ## AAACAGAGCGACTCCT-1 1 14 94 ## AAACAGCTTTCAGAAG-1 1 43 9 ## ground_truth cell_count sum ## &lt;character&gt; &lt;integer&gt; &lt;numeric&gt; ## AAACAACGAATAGTTC-1 NA NA 622 ## AAACAAGTATCTCCCA-1 Layer3 6 8458 ## AAACAATCTACTAGCA-1 Layer1 16 1667 ## AAACACCAATAACTGC-1 WM 5 3769 ## AAACAGAGCGACTCCT-1 Layer3 2 5433 ## AAACAGCTTTCAGAAG-1 Layer5 4 4278 ## detected subsets_Mito_sum ## &lt;numeric&gt; &lt;numeric&gt; ## AAACAACGAATAGTTC-1 526 37 ## AAACAAGTATCTCCCA-1 3586 1407 ## AAACAATCTACTAGCA-1 1150 204 ## AAACACCAATAACTGC-1 1960 430 ## AAACAGAGCGACTCCT-1 2424 1316 ## AAACAGCTTTCAGAAG-1 2264 651 ## subsets_Mito_detected ## &lt;numeric&gt; ## AAACAACGAATAGTTC-1 9 ## AAACAAGTATCTCCCA-1 13 ## AAACAATCTACTAGCA-1 11 ## AAACACCAATAACTGC-1 13 ## AAACAGAGCGACTCCT-1 13 ## AAACAGCTTTCAGAAG-1 12 ## subsets_Mito_percent total ## &lt;numeric&gt; &lt;numeric&gt; ## AAACAACGAATAGTTC-1 5.94855 622 ## AAACAAGTATCTCCCA-1 16.63514 8458 ## AAACAATCTACTAGCA-1 12.23755 1667 ## AAACACCAATAACTGC-1 11.40886 3769 ## AAACAGAGCGACTCCT-1 24.22234 5433 ## AAACAGCTTTCAGAAG-1 15.21739 4278 colData(spe) |&gt; data.frame() |&gt; ggplot(aes(x = sum, y = detected, colour = as.factor(in_tissue))) + geom_point() plotColData(spe, x=&#39;sum&#39;, y = &#39;subsets_Mito_percent&#39;, other_fields=&quot;in_tissue&quot;) + facet_wrap(~in_tissue) Firstly, we filter the data to retain the cells that are in the tissue. Then cell-specific biases are normalized using the computeSumFactors method. spe &lt;- spe[, spe$in_tissue == 1] clusters &lt;- quickCluster( spe, BPPARAM = BiocParallel::MulticoreParam(workers=2), block.BPPARAM = BiocParallel::MulticoreParam(workers=2) ) spe &lt;- computeSumFactors(spe, clusters = clusters, BPPARAM = BiocParallel::MulticoreParam(workers=2)) spe &lt;- logNormCounts(spe) Next, we use the Graph-based clustering method to do the reduction with the runPCA and runTSNE functions provided in the scater package. # identify genes that drive biological heterogeneity in the data set by # modelling the per-gene variance dec &lt;- modelGeneVar(spe) # Get the top 15% genes. top.hvgs &lt;- getTopHVGs(dec, prop=0.15) spe &lt;- runPCA(spe, subset_row=top.hvgs) output &lt;- getClusteredPCs(reducedDim(spe), BPPARAM = BiocParallel::MulticoreParam(workers=2)) npcs &lt;- metadata(output)$chosen npcs ## [1] 13 reducedDim(spe, &quot;PCAsub&quot;) &lt;- reducedDim(spe, &quot;PCA&quot;)[,1:npcs,drop=FALSE] g &lt;- buildSNNGraph(spe, use.dimred=&quot;PCAsub&quot;, BPPARAM = MulticoreParam(workers=2)) cluster &lt;- igraph::cluster_walktrap(g)$membership colLabels(spe) &lt;- factor(cluster) set.seed(123) spe &lt;- runTSNE(spe, dimred=&quot;PCAsub&quot;, BPPARAM = MulticoreParam(workers=2)) 2.1 Dimensional reduction plot Here, we used the sc_dim function provided in the ggsc package to visualize the TSNE reduction result. Unlike other packages, ggsc implemented the ggplot2 graphic of grammar syntax and visual elements are overlaid through the combinations of graphic layers. The sc_dim_geom_label layer is designed to add cell cluster labels to a dimensional reduction plot, and can utilized different implementation of text geoms, such as geom_shadowtext in the shadowtext package and geom_text in the ggplot2 package (default) through the geom argument. library(ggsc) library(ggplot2) sc_dim(spe, reduction = &#39;TSNE&#39;) + sc_dim_geom_label() sc_dim(spe, reduction = &#39;TSNE&#39;) + sc_dim_geom_label( geom = shadowtext::geom_shadowtext, color=&#39;black&#39;, bg.color=&#39;white&#39; ) 2.2 Visualize ‘features’ on a dimensional reduction plot To visualize the gene expression of cells in the result of reduction, ggsc provides sc_feature function to highlight on a dimensional reduction plot. genes &lt;- c(&#39;MOBP&#39;, &#39;PCP4&#39;, &#39;SNAP25&#39;, &#39;HBB&#39;, &#39;IGKC&#39;, &#39;NPY&#39;) target.features &lt;- rownames(spe)[match(genes, rowData(spe)$gene_name)] sc_feature(spe, target.features[1], slot=&#39;logcounts&#39;, reduction = &#39;TSNE&#39;) sc_feature(spe, target.features, slot=&#39;logcounts&#39;, reduction = &#39;TSNE&#39;) In addition, it provides sc_dim_geom_feature layer working with sc_dim function to visualize the cells expressed the gene and the cell clusters information simultaneously. sc_dim(spe, slot=&#39;logcounts&#39;, reduction = &#39;TSNE&#39;) + sc_dim_geom_feature(spe, target.features[1], color=&#39;black&#39;) sc_dim(spe, alpha=.3, slot=&#39;logcounts&#39;, reduction = &#39;TSNE&#39;) + ggnewscale::new_scale_color() + sc_dim_geom_feature(spe, target.features, mapping=aes(color=features)) + scale_color_viridis_d() It also provides sc_dim_geom_ellipse to add confidence levels of the the cluster result, and sc_dim_geom_sub to select and highlight a specific cluster of cells. sc_dim(spe, reduction = &#39;TSNE&#39;) + sc_dim_geom_ellipse(level=0.95) selected.cluster &lt;- c(1, 6, 8) sc_dim(spe, reduction = &#39;TSNE&#39;) + sc_dim_sub(subset=selected.cluster, .column = &#39;label&#39;) sc_dim(spe, color=&#39;grey&#39;, reduction = &#39;TSNE&#39;) + sc_dim_geom_sub(subset=selected.cluster, .column = &#39;label&#39;) + sc_dim_geom_label(geom = shadowtext::geom_shadowtext, mapping = aes(subset = label %in% selected.cluster), color=&#39;black&#39;, bg.color=&#39;white&#39;) 2.3 Dot plot for selected features genes &lt;- c(&#39;MOBP&#39;, &#39;PCP4&#39;, &#39;SNAP25&#39;, &#39;HBB&#39;, &#39;IGKC&#39;, &#39;NPY&#39;) target.features &lt;- rownames(spe)[match(genes, rowData(spe)$gene_name)] sc_dot(spe, target.features, slot=&quot;logcounts&quot;) 2.4 Violin plot of gene expression ggsc provides sc_violin to visualize the expression information of specific genes using the violin layer with common legend, the genes can be compared more intuitively. sc_violin(spe, target.features[1], slot = &#39;logcounts&#39;) sc_violin(spe, target.features[1], slot = &#39;logcounts&#39;, .fun=function(d) dplyr::filter(d, value &gt; 0) ) + ggforce::geom_sina(size=.1) sc_violin(spe, target.features, slot = &#39;logcounts&#39;) + theme(axis.text.x = element_text(angle=45, hjust=1)) 2.5 Spatial features To visualize the spatial pattern of gene, ggsc provides sc_spatial to visualize specific features/genes with image information. library(aplot) f &lt;- sc_spatial(spe, features = target.features, slot = &#39;logcounts&#39;, ncol = 3, image.mirror.axis = NULL, image.rotate.degree = -90 ) f pp &lt;- lapply(target.features, function(i) { sc_spatial(spe, features = i, slot = &#39;logcounts&#39;, image.rotate.degree = -90, image.mirror.axis = NULL) }) aplot::plot_list(gglist = pp) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
